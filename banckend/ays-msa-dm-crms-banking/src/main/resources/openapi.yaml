openapi: 3.0.3
info:
  title: Sistema Bancario - API REST
  description: |
    <sup>(ES)</sup> API completa para gestión de sistema bancario que maneja clientes, cuentas bancarias, movimientos y generación de reportes. Diseñada para microservicios con Spring Boot y JPA.<br><br>
    <sup>(EN)</sup> Complete API for banking system management that handles clients, bank accounts, transactions and report generation. Designed for microservices with Spring Boot and JPA.<br><br>
    
    <b>• Business area | Área de negocio:</b> `Banking Operations` <br><br>
    <b>• Business domain | Dominio de negocio:</b> `Core Banking` <br><br>
    <b>• Service domain | Dominio de servicio:</b> `Account Management & Transactions` <br><br>

    <b> Change Log | Bitácora de Cambios </b> <br>
    - Version 1.0.0
      - Initial release with complete CRUD operations <br>
      - Client, Account, and Transaction management <br>
      - PDF and JSON report generation <br>
      - Business validations implementation <br>
  contact:
    name: Banking System Development Team
    email: dev-team@empresa.com
  version: 1.0.0
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
externalDocs:
  description: Banking System Documentation
  url: https://docs.empresa.com/sistema-bancario
servers:
  - url: http://localhost:8080/api
    description: Development environment
  - url: http://test-bancario.localhost:8080/api
    description: Testing environment
  - url: https://api-bancario.empresa.com/api
    description: Production environment

tags:
  - name: Clientes
    description: |
      <sup>(ES)</sup> Gestión completa de clientes del sistema bancario incluyendo operaciones CRUD y validaciones de negocio.<br><br>
      <sup>(EN)</sup> Complete management of banking system clients including CRUD operations and business validations.
  - name: Cuentas
    description: |
      <sup>(ES)</sup> Administración de cuentas bancarias (Ahorros y Corriente) con control de saldos y estados.<br><br>
      <sup>(EN)</sup> Bank account administration (Savings and Checking) with balance and status control.
  - name: Movimientos
    description: |
      <sup>(ES)</sup> Registro y consulta de transacciones bancarias con validación de saldos y auditoría completa.<br><br>
      <sup>(EN)</sup> Registration and query of banking transactions with balance validation and complete auditing.
  - name: Reportes
    description: |
      <sup>(ES)</sup> Generación de estados de cuenta en formato JSON y PDF por cliente y rango de fechas.<br><br>
      <sup>(EN)</sup> Account statement generation in JSON and PDF format by client and date range.

paths:
  # ==========================================
  # GESTIÓN DE CLIENTES
  # ==========================================
  /clientes:
    get:
      tags:
        - Clientes
      summary: Listar todos los clientes
      description: Obtiene la lista paginada de todos los clientes registrados en el sistema
      operationId: getAllClientes
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/SizeParam'
        - name: estado
          in: query
          description: Filtrar por estado
          required: false
          schema:
            type: boolean
            example: true
      responses:
        '200':
          description: Lista de clientes obtenida exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClienteListResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      tags:
        - Clientes
      summary: Crear nuevo cliente
      description: Crea un nuevo cliente en el sistema bancario
      operationId: createCliente
      requestBody:
        $ref: '#/components/requestBodies/ClienteRequest'
      responses:
        '201':
          description: Cliente creado exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClienteResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /clientes/{id}:
    get:
      tags:
        - Clientes
      summary: Obtener cliente por ID
      description: Obtiene la información completa de un cliente específico
      operationId: getClienteById
      parameters:
        - $ref: '#/components/parameters/ClienteIdParam'
      responses:
        '200':
          description: Cliente encontrado exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClienteResponse'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    put:
      tags:
        - Clientes
      summary: Actualizar cliente
      description: Actualiza la información de un cliente existente
      operationId: updateCliente
      parameters:
        - $ref: '#/components/parameters/ClienteIdParam'
      requestBody:
        $ref: '#/components/requestBodies/ClienteUpdateRequest'
      responses:
        '200':
          description: Cliente actualizado exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClienteResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      tags:
        - Clientes
      summary: Eliminar cliente
      description: Elimina un cliente del sistema
      operationId: deleteCliente
      parameters:
        - $ref: '#/components/parameters/ClienteIdParam'
      responses:
        '204':
          description: Cliente eliminado exitosamente
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  # ==========================================
  # GESTIÓN DE CUENTAS
  # ==========================================
  /cuentas:
    get:
      tags:
        - Cuentas
      summary: Listar todas las cuentas
      description: Obtiene la lista paginada de todas las cuentas del sistema
      operationId: getAllCuentas
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/SizeParam'
        - name: clienteId
          in: query
          description: Filtrar por ID del cliente
          required: false
          schema:
            type: integer
            format: int64
            example: 1
      responses:
        '200':
          description: Lista de cuentas obtenida exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CuentaListResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      tags:
        - Cuentas
      summary: Crear nueva cuenta
      description: Crea una nueva cuenta bancaria para un cliente
      operationId: createCuenta
      requestBody:
        $ref: '#/components/requestBodies/CuentaRequest'
      responses:
        '201':
          description: Cuenta creada exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CuentaResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /cuentas/{numeroCuenta}:
    get:
      tags:
        - Cuentas
      summary: Obtener cuenta por número
      description: Obtiene la información completa de una cuenta específica
      operationId: getCuentaByNumero
      parameters:
        - $ref: '#/components/parameters/NumeroCuentaParam'
      responses:
        '200':
          description: Cuenta encontrada exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CuentaResponse'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    put:
      tags:
        - Cuentas
      summary: Actualizar cuenta
      description: Actualiza la información de una cuenta existente
      operationId: updateCuenta
      parameters:
        - $ref: '#/components/parameters/NumeroCuentaParam'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [data]
              properties:
                data:
                  $ref: '#/components/schemas/CuentaUpdate'
            examples:
              updateCuenta:
                summary: Actualizar tipo de cuenta
                value:
                  data:
                    tipoCuenta: "Corriente"
      responses:
        '200':
          description: Cuenta actualizada exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CuentaResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      tags:
        - Cuentas
      summary: Eliminar cuenta (soft delete)
      description: |
        Elimina lógicamente una cuenta estableciendo su estado en false. 
        La cuenta permanece en el sistema para auditoría pero se marca como inactiva.
        En términos bancarios, esto equivale a "cerrar" la cuenta.
      operationId: deleteCuenta
      parameters:
        - $ref: '#/components/parameters/NumeroCuentaParam'
      responses:
        '204':
          description: Cuenta eliminada (desactivada) exitosamente
        '404':
          $ref: '#/components/responses/NotFound'
        '400':
          description: No se puede eliminar la cuenta
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
              examples:
                cuentaConSaldo:
                  summary: Cuenta con saldo pendiente
                  value:
                    title: "Bad Request"
                    detail: "No se puede eliminar una cuenta con saldo pendiente"
                    instance: "0001"
                    type: "/errors/cuenta-con-saldo"
        '500':
          $ref: '#/components/responses/InternalServerError'

  # ==========================================
  # GESTIÓN DE MOVIMIENTOS
  # ==========================================
  /movimientos:
    get:
      tags:
        - Movimientos
      summary: Listar todos los movimientos
      description: Obtiene la lista paginada de todos los movimientos del sistema
      operationId: getAllMovimientos
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/SizeParam'
        - name: numeroCuenta
          in: query
          description: Filtrar por numero de cuenta
          required: false
          schema:
            type: string
            maxLength: 20
            example: "123456"
      responses:
        '200':
          description: Lista de movimientos obtenida exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MovimientoListResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      tags:
        - Movimientos
      summary: Crear nuevo movimiento
      description: Registra un nuevo movimiento bancario
      operationId: createMovimiento
      requestBody:
        $ref: '#/components/requestBodies/MovimientoRequest'
      responses:
        '201':
          description: Movimiento creado exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MovimientoResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'

  # ==========================================
  # REPORTES
  # ==========================================
  /reportes:
    get:
      tags:
        - Reportes
      summary: Generar reporte de estado de cuenta
      description: Genera un reporte del estado de cuenta por cliente y rango de fechas
      operationId: generateReporte
      parameters:
        - name: clienteId
          in: query
          description: ID del cliente
          required: true
          schema:
            type: integer
            format: int64
            example: 1
        - name: fechaInicio
          in: query
          description: Fecha de inicio del reporte
          required: true
          schema:
            type: string
            format: date
            example: "2024-09-01"
        - name: fechaFin
          in: query
          description: Fecha de fin del reporte
          required: true
          schema:
            type: string
            format: date
            example: "2024-09-30"
        - name: formato
          in: query
          description: Formato del reporte
          required: false
          schema:
            allOf:
              - $ref: '#/components/schemas/FormatoReporteValues'
              - default: "json"
      responses:
        '200':
          description: Reporte generado exitosamente
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ReporteResponse'
                  - $ref: '#/components/schemas/ReportePDFResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

components:
  schemas:
    # ==========================================
    # ENUMS VALUES - PATRÓN BANCO PICHINCHA
    # ==========================================
    
    GeneroValues:
      type: string
      description: "<sup><i>(ES)</i></sup>Género de la persona según su identidad. <br><br> \n<sup><i>(EN)</i></sup>Person gender according to their identity.\n"
      enum:
      - Masculino
      - Femenino
      - Otro

    TipoIdentificacionValues:
      type: string
      description: "<sup><i>(ES)</i></sup>Tipo de documento de identificación válido para personas naturales y jurídicas. <br><br> \n<sup><i>(EN)</i></sup>Type of identification document valid for natural and legal persons.\n"
      enum:
      - Cedula
      - Pasaporte
      - RUC

    TipoCuentaValues:
      type: string
      description: "<sup><i>(ES)</i></sup>Clasificación de cuenta bancaria según su naturaleza y propósito financiero. <br><br> \n<sup><i>(EN)</i></sup>Bank account classification according to its nature and financial purpose.\n"
      enum:
      - Ahorros
      - Corriente

    TipoMovimientoValues:
      type: string
      description: "<sup><i>(ES)</i></sup>Tipo de transacción bancaria que afecta el saldo de la cuenta. <br><br> \n<sup><i>(EN)</i></sup>Type of banking transaction that affects the account balance.\n"
      enum:
      - Débito
      - Crédito

    FormatoReporteValues:
      type: string
      description: "<sup><i>(ES)</i></sup>Formato de salida disponible para la generación de reportes del sistema. <br><br> \n<sup><i>(EN)</i></sup>Output format available for system report generation.\n"
      enum:
      - json
      - pdf

    # ==========================================
    # ESQUEMAS ÚNICOS POR ENTIDAD
    # ==========================================
    
    Persona:
      type: object
      required:
        - nombre
        - apellido
        - genero
        - edad
        - tipoIdentificacion
        - identificacion
        - callePrincipal
        - calleSecundaria
        - numeroCasa
        - ciudad
        - provincia
        - telefono
      properties:
        id:
          type: integer
          format: int64
          description: Clave primaria autoincremental
          example: 1
          readOnly: true
        nombre:
          type: string
          maxLength: 50
          example: "Jose"
        apellido:
          type: string
          maxLength: 50
          example: "Lema"
        genero:
          $ref: '#/components/schemas/GeneroValues'
        edad:
          type: integer
          minimum: 18
          maximum: 120
          example: 35
        tipoIdentificacion:
          $ref: '#/components/schemas/TipoIdentificacionValues'
        identificacion:
          type: string
          maxLength: 20
          example: "1234567890"
        callePrincipal:
          type: string
          maxLength: 100
          example: "Otavalo"
        calleSecundaria:
          type: string
          maxLength: 100
          example: "Principal"
        numeroCasa:
          type: string
          maxLength: 10
          example: "S/N"
        ciudad:
          type: string
          maxLength: 50
          example: "Quito"
        provincia:
          type: string
          maxLength: 50
          example: "Pichincha"
        telefono:
          type: string
          maxLength: 15
          pattern: "^[0-9]{9,15}$"
          example: "098254785"

    Cliente:
      allOf:
        - $ref: '#/components/schemas/Persona'
        - type: object
          required:
            - contrasena
          properties:
            clienteId:
              type: string
              pattern: "^C[0-9]{4}$"
              description: Código único generado automáticamente
              example: "C7890"
              readOnly: true
            contrasena:
              type: string
              maxLength: 255
              description: Contraseña del cliente
              example: "1234"
              writeOnly: true
            estado:
              type: boolean
              description: Estado activo/inactivo
              example: true
              default: true

    ClienteUpdate:
      type: object
      required:
        - nombre
        - apellido
        - callePrincipal
        - calleSecundaria
        - numeroCasa
        - ciudad
        - provincia
        - telefono
      properties:
        # Campos actualizables de persona
        nombre:
          type: string
          maxLength: 50
          example: "Jose"
        apellido:
          type: string
          maxLength: 50
          example: "Lema"
        genero:
          $ref: '#/components/schemas/GeneroValues'
        edad:
          type: integer
          minimum: 18
          maximum: 120
          example: 35
        # Campos de dirección actualizables
        callePrincipal:
          type: string
          maxLength: 100
          example: "Otavalo"
        calleSecundaria:
          type: string
          maxLength: 100
          example: "Principal"
        numeroCasa:
          type: string
          maxLength: 10
          example: "S/N"
        ciudad:
          type: string
          maxLength: 50
          example: "Quito"
        provincia:
          type: string
          maxLength: 50
          example: "Pichincha"
        telefono:
          type: string
          maxLength: 15
          pattern: "^[0-9]{9,15}$"
          example: "098254785"
        # Campos específicos de cliente (opcionales)
        contraseña:
          type: string
          maxLength: 255
          description: Nueva contraseña (opcional para actualización)
          example: "nuevaContraseña123"
          writeOnly: true
        estado:
          type: boolean
          description: Estado activo/inactivo
          example: true
        # EXCLUIDOS INTENCIONALMENTE (inmutables por seguridad bancaria):
        # - tipoIdentificacion: No se puede cambiar por regulaciones
        # - identificacion: Documento legal inmutable

    Cuenta:
      type: object
      required:
        - tipoCuenta
        - saldoInicial
        - idCliente
      properties:
        id:
          type: integer
          format: int64
          example: 1
          readOnly: true
        idCliente:
          type: integer
          format: int64
          description: ID del cliente propietario
          example: 1
        nombreCliente:
          type: string
          description: Nombre completo del cliente propietario de la cuenta
          example: "Jose Alamos"
        numeroCuenta:
          type: string
          maxLength: 20
          example: "478758"
        tipoCuenta:
          $ref: '#/components/schemas/TipoCuentaValues'
        saldoInicial:
          type: number
          format: decimal
          minimum: 0
          multipleOf: 0.01
          example: 2000.00
        saldoActual:
          type: number
          format: decimal
          minimum: 0
          multipleOf: 0.01
          description: Saldo actual calculado automáticamente
          example: 1425.00
          readOnly: true
        estado:
          type: boolean
          example: true
          default: true

    CuentaUpdate:
      type: object
      properties:
        # Campos actualizables para el ejercicio
        tipoCuenta:
          $ref: '#/components/schemas/TipoCuentaValues'
        # EXCLUIDOS por diseño:
        # - numeroCuenta: Está en la URL del endpoint
        # - idCliente: Inmutable por seguridad (no puede cambiar propietario)
        # - saldoInicial: Inmutable por auditoría contable
        # - saldoActual: Calculado automáticamente (read-only)
        # - estado : para el eliminado logico

    Movimiento:
      type: object
      required:
        - tipoMovimiento
        - valor
        - numeroCuenta
      properties:
        id:
          type: integer
          format: int64
          example: 1
          readOnly: true
        idCuenta:
          type: integer
          format: int64
          description: ID de la cuenta asociada
          example: 1
        numeroCuenta:
            type: string
            description: Número de cuenta asociado al movimiento
            example: "478758"
#            readOnly: true
        nombreCliente:
            type: string
            description: Nombre completo del cliente propietario de la cuenta
            example: "Jose Alamos"
            readOnly: true
        fecha:
          type: string
          format: date-time
          description: Fecha y hora del movimiento
          example: "2024-09-25T10:30:00Z"
          readOnly: true
        tipoMovimiento:
          $ref: '#/components/schemas/TipoMovimientoValues'
        valor:
          type: number
          format: decimal
          multipleOf: 0.01
          description: Valor del movimiento (siempre positivo)
          example: 600.00
        saldoAnterior:
          type: number
          format: decimal
          multipleOf: 0.01
          description: Saldo antes del movimiento
          example: 2000.00
          readOnly: true
        saldoPosterior:
          type: number
          format: decimal
          multipleOf: 0.01
          description: Saldo después del movimiento
          example: 1425.00
          readOnly: true
        descripcion:
          type: string
          maxLength: 200
          description: Descripción del movimiento
          example: "Depósito en efectivo"
        referencia:
          type: string
          maxLength: 50
          description: Número de referencia
          example: "DEP-VEN-20240925-001"
        estado:
          type: boolean
          example: true
          default: true

    # ==========================================
    # RESPONSES UNIFICADAS
    # ==========================================
    ClienteResponse:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/Cliente'
        message:
          type: string
          example: "Operación exitosa"

    ClienteListResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Cliente'
        pagination:
          $ref: '#/components/schemas/PaginationInfo'

    CuentaResponse:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/Cuenta'
        message:
          type: string
          example: "Operación exitosa"

    CuentaListResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Cuenta'
        pagination:
          $ref: '#/components/schemas/PaginationInfo'

    MovimientoResponse:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/Movimiento'
        message:
          type: string
          example: "Operación exitosa"

    MovimientoListResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Movimiento'
        pagination:
          $ref: '#/components/schemas/PaginationInfo'

    ReporteEstadoCuenta:
      type: object
      properties:
        fechaInicio:
          type: string
          format: date
          example: "2024-09-01"
        fechaFin:
          type: string
          format: date
          example: "2024-09-30"
        cliente:
          type: object
          properties:
            nombre:
              type: string
              example: "Jose Lema"
            clienteId:
              type: string
              example: "C7890"
        resumenGeneral:
          type: object
          properties:
            totalCreditos:
              type: number
              format: decimal
              multipleOf: 0.01
              example: 5000.00
            totalDebitos:
              type: number
              format: decimal
              multipleOf: 0.01
              example: 3500.00
            saldoFinal:
              type: number
              format: decimal
              multipleOf: 0.01
              example: 1500.00
        cuentas:
          type: array
          items:
            type: object
            properties:
              numeroCuenta:
                type: string
                example: "478758"
              tipoCuenta:
                type: string
                example: "Ahorros"
              resumenCuenta:
                type: object
                properties:
                  saldoInicial:
                    type: number
                    format: decimal
                    multipleOf: 0.01
                    example: 2000.00
                  totalMovimientos:
                    type: integer
                    example: 15
                  saldoFinal:
                    type: number
                    format: decimal
                    multipleOf: 0.01
                    example: 1425.00
              movimientos:
                type: array
                items:
                  $ref: '#/components/schemas/Movimiento'

    ReporteResponse:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/ReporteEstadoCuenta'
        message:
          type: string
          example: "Reporte generado exitosamente"

    ReportePDF:
      type: object
      properties:
        contentType:
          type: string
          example: "application/pdf"
        filename:
          type: string
          example: "estado-cuenta-C7890-202409.pdf"
        data:
          type: string
          format: binary
          description: Contenido binario del PDF

    ReportePDFResponse:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/ReportePDF'
        message:
          type: string
          example: "Reporte PDF generado exitosamente"

    # ==========================================
    # CLASES AUXILIARES
    # ==========================================
    PaginationInfo:
      type: object
      properties:
        page:
          type: integer
          description: Página actual (base 0)
          example: 0
        size:
          type: integer
          description: Tamaño de página
          example: 20
        totalElements:
          type: integer
          format: int64
          description: Total de elementos
          example: 100
        totalPages:
          type: integer
          description: Total de páginas
          example: 5
        first:
          type: boolean
          description: Es la primera página
          example: true
        last:
          type: boolean
          description: Es la última página
          example: false

    ErrorModel:
      type: object
      required:
        - title
        - detail
        - instance
        - type
      properties:
        title:
          type: string
          maxLength: 50
          description: Mensaje de error técnico
          example: "Internal Server Error"
        detail:
          type: string
          maxLength: 500
          description: Mensaje a presentar al cliente
          example: "Se produjo un error interno, lo estamos revisando."
        errors:
          type: array
          items:
            $ref: '#/components/schemas/ErrorList'
        instance:
          type: string
          maxLength: 50
          description: Código de catálogo de errores
          example: "0188"
        type:
          type: string
          maxLength: 100
          description: Referencia URI que identifica el tipo de problema
          example: "/v1/sistema-bancario/clientes"
        resource:
          type: string
          description: Recurso donde se generó el error
          example: "ClienteService/crearCliente"
        component:
          type: string
          description: Componente de la aplicación
          example: "SistemaBancario"
        backend:
          type: string
          description: Código backend
          example: "00001"

    ErrorList:
      type: object
      properties:
        code:
          type: string
          description: Código de error
          example: "001"
        message:
          type: string
          description: Mensaje de error técnico
          example: "Bad Request"
        businessMessage:
          type: string
          description: Mensaje de negocio
          example: "La identificación debe tener 10 dígitos"

  # ==========================================
  # REQUEST BODIES SIMPLIFICADOS
  # ==========================================
  requestBodies:
    ClienteRequest:
      required: true
      content:
        application/json:
          schema:
            type: object
            required: [data]
            properties:
              data:
                $ref: '#/components/schemas/Cliente'
          examples:
            newCliente:
              summary: Crear nuevo cliente
              value:
                data:
                  nombre: "Juan"
                  apellido: "Osorio"
                  genero: "Masculino"
                  edad: 42
                  tipoIdentificacion: "Cedula"
                  identificacion: "1122334455"
                  callePrincipal: "Cusubamba"
                  calleSecundaria: "Juan Bartolome"
                  ciudad: "Quito"
                  provincia: "Pichincha"
                  numeroCasa: "S26-108"
                  contraseña: "1245"
                  telefono: "098874587"

    ClienteUpdateRequest:
      required: true
      content:
        application/json:
          schema:
            type: object
            required: [data]
            properties:
              data:
                $ref: '#/components/schemas/ClienteUpdate'
          examples:
            updateCliente:
              summary: Actualizar datos del cliente
              value:
                data:
                  nombre: "Jose"
                  apellido: "Lema Actualizado"
                  callePrincipal: "Cusubamba"
                  calleSecundaria: "Juan Bartolome"
                  ciudad: "Quito"
                  provincia: "Pichincha"
                  numeroCasa: "S26-108"
                  telefono: "098254786"
            updateClienteWithPassword:
              summary: Actualizar datos del cliente incluyendo contraseña
              value:
                data:
                  nombre: "Jose"
                  apellido: "Lema Actualizado"
                  genero: "Masculino"
                  edad: 36
                  callePrincipal: "Cusubamba"
                  calleSecundaria: "Juan Bartolome"
                  ciudad: "Quito"
                  provincia: "Pichincha"
                  numeroCasa: "S26-108"
                  telefono: "098254786"
                  contraseña: "nuevaContraseña123"
                  estado: false

    CuentaRequest:
      required: true
      content:
        application/json:
          schema:
            type: object
            required: [data]
            properties:
              data:
                $ref: '#/components/schemas/Cuenta'
          examples:
            newCuenta:
              summary: Crear nueva cuenta
              value:
                data:
                  tipoCuenta: "Ahorros"
                  saldoInicial: 1500.00
                  idCliente: 3

    MovimientoRequest:
      required: true
      content:
        application/json:
          schema:
            type: object
            required: [data]
            properties:
              data:
                $ref: '#/components/schemas/Movimiento'
          examples:
            creditoMovimiento:
              summary: Movimiento de crédito
              value:
                data:
                  tipoMovimiento: "Crédito"
                  valor: 600.00
                  descripcion: "Depósito en efectivo"
                  numeroCuenta: "12345"

  # ==========================================
  # PARAMETERS REUTILIZABLES
  # ==========================================
  parameters:
    PageParam:
      name: page
      in: query
      description: Número de página (base 0)
      required: false
      schema:
        type: integer
        minimum: 0
        default: 0
        example: 0

    SizeParam:
      name: size
      in: query
      description: Tamaño de página
      required: false
      schema:
        type: integer
        minimum: 1
        maximum: 100
        default: 20
        example: 20

    ClienteIdParam:
      name: id
      in: path
      description: ID único del cliente
      required: true
      schema:
        type: integer
        format: int64
        example: 1

    NumeroCuentaParam:
      name: numeroCuenta
      in: path
      description: Número único de cuenta
      required: true
      schema:
        type: string
        maxLength: 20
        example: "478758"

  # ==========================================
  # RESPONSES REUTILIZABLES
  # ==========================================
  responses:
    BadRequest:
      description: Solicitud incorrecta - Error en los datos enviados
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorModel'
          examples:
            validationError:
              summary: Error de validación
              value:
                title: "Bad Request"
                detail: "Los datos proporcionados no son válidos"
                instance: "0001"
                type: "/errors/validation"
                errors:
                  - code: "001"
                    message: "Validation failed"
                    businessMessage: "La identificación debe tener 10 dígitos"

    NotFound:
      description: Recurso no encontrado
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorModel'
          examples:
            notFound:
              summary: Recurso no encontrado
              value:
                title: "Not Found"
                detail: "El recurso solicitado no existe"
                instance: "0404"
                type: "/errors/not-found"

    Conflict:
      description: Conflicto - El recurso ya existe
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorModel'
          examples:
            conflict:
              summary: Recurso duplicado
              value:
                title: "Conflict"
                detail: "Ya existe un cliente con esa identificación"
                instance: "0409"
                type: "/errors/conflict"

    InternalServerError:
      description: Error interno del servidor
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorModel'
          examples:
            serverError:
              summary: Error interno
              value:
                title: "Internal Server Error"
                detail: "Se produjo un error interno, lo estamos revisando"
                instance: "0188"
                type: "/errors/internal"
                component: "SistemaBancario"
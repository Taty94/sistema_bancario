import org.openapitools.generator.gradle.plugin.tasks.GenerateTask

plugins {
    id 'jacoco'
	id 'java'
	id 'org.springframework.boot' version '3.5.5'
    id 'io.spring.dependency-management' version '1.1.7'
	id 'org.openapi.generator' version '7.15.0'
} 

def packageName = "com.pichincha.dm.crms.banking"

springBoot {
	mainClass = "${packageName}.OptimusApplication"
}


group = "com.pichincha.dm.crms.banking"
version = "0.0.1"

java {
  sourceCompatibility = JavaVersion.VERSION_21
  toolchain {
    languageVersion = JavaLanguageVersion.of(21)
  }
}


configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
    maven {
        url "https://pkgs.dev.azure.com/BancoPichinchaEC/0f20bf47-c965-46fe-8bd4-91df57fbb2e7/_packaging/Framework/maven/v1"
        name "BancoPichinchaEC"
        credentials {
            username System.getenv("ARTIFACT_USERNAME")
            password System.getenv("ARTIFACT_TOKEN")
        }
    }    
} 

ext {
    set('springCloudVersion', '2025.0.0')
    set('mapstructVersion', '1.6.2')
}


dependencies {

    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'

    // MapStruct for object mapping
    implementation group: "org.mapstruct", name: "mapstruct", version: "${mapstructVersion}"
    annotationProcessor group: "org.mapstruct", name: "mapstruct-processor", version: "${mapstructVersion}"

    //dependencias para postgres
    implementation "org.springframework.boot:spring-boot-starter-data-jpa"
    implementation group: 'org.postgresql', name: 'postgresql', version: '42.6.1'

    // Spring Boot essentials
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    // PDF generation
    implementation 'com.github.librepdf:openpdf:1.3.30'

    // Exception
    implementation 'com.pichincha.common:lib-error-detail-sb3:1.4.0'

    // OpenAPI/Swagger documentation (compatible con Spring Boot 3.5+)
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.2.0'

    //test
    testImplementation("org.springframework.boot:spring-boot-starter-test") {
        exclude group: 'org.springdoc', module: 'springdoc-openapi-starter-webmvc-ui'
    }
    testImplementation "org.junit.jupiter:junit-jupiter-engine"
}

dependencyManagement {
  imports {
    mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
  }
}


tasks.register('buildSpringServer', GenerateTask) {
    generatorName = "spring"
    inputSpec = "$rootDir/src/main/resources/openapi.yaml".toString()
    outputDir = "$buildDir/generated".toString()
    apiPackage = "${packageName}.infrastructure.input.adapter.rest"
    modelPackage = "${packageName}.infrastructure.input.adapter.rest.models"
    library = "spring-boot"
    configOptions = [
        useSpringBoot3                          : "true",
        useJakartaEe                            : "true",
        serializableModel                       : "true",
        dateLibrary                             : "java8",
        openApiNullable                         : "false",
        apiFirst                                : "false",
        delegatePattern                         : "true",
        configPackage                           : "${packageName}.config",
        sourceFolder                            : "src/main/java",
        basePackage                             : "${packageName}",
        disallowAdditionalPropertiesIfNotPresent: "true",
        interfaceOnly                           : "true"
    ]
}

 

tasks.register('optimusCreateUnitTest', JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    mainClass = "com.pichincha.dm.crms.banking.OptimusApplication"
}

compileJava {
    dependsOn buildSpringServer 
    options.compilerArgs += [
            "-Amapstruct.suppressGeneratorTimestamp=true",
            "-Amapstruct.suppressGeneratorVersionInfoComment=true",
            "-Amapstruct.verbose=true",
            "-Amapstruct.defaultComponentModel=spring"
    ]
}
 
sourceSets.main.java.srcDirs = ["$buildDir/generated/src/main/java", "src/main/java"]

springBoot{
    buildInfo() 
}

test {
    useJUnitPlatform()
    finalizedBy jacocoTestReport
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.required = true
        xml.destination file("$buildDir/jacoco/test.xml")
        html.destination file("$buildDir/jacoco/index.html")
        html.required = true
        csv.required = true
    }
}
